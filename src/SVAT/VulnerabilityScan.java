package SVAT;

import java.awt.EventQueue;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

public class VulnerabilityScan {

	private JFrame frame;
	private JTextField sessionTime;
	private JTextField pwMinLenth;
	private JTextField pwMinDays;
	private JTextField pwMaxLenth;
	private JTextField pwMaxDays;
	
	Map<String, String> checkDataMap = new HashMap<>();
	List<String> checkDataList = new ArrayList<>();
	List<Boolean> btnChkList = new ArrayList<>();
	boolean fileExist = true;

	private static List<String> OSList = new ArrayList<>(Arrays.asList("CentOs6", "CentOs7", "AIX"));
	private static List<String> settingList = new ArrayList<>(Arrays.asList("Session_Time", "Password_Min_Length", "Password_Max_Length", "Password_Min_Days", "Password_Max_Days"));


	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					VulnerabilityScan window = new VulnerabilityScan();
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public VulnerabilityScan() {
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 * @throws IOException 
	 * @throws FileNotFoundException 
	 */
	private void initialize() {
		
		// 프로그램이 실행되면 설정파일 생성
		try {
			fileExist = DataManager.findSettingFile();
		} catch (Exception e) {
			System.out.println(e);
			
		}
		
		// 가이드라인에 맞춰 데이터 초기화
		DataManager.setGuideLineData(OSList, fileExist);	
		
		// 화면 구성 소스
		frame = new JFrame();
		frame.setTitle("취약점 진단 초기값 설정");
		frame.setBounds(100, 100, 420, 508);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(null);
		frame.setLocationRelativeTo(null);
		frame.setResizable(false);
		
		JPanel panel = new JPanel();
		panel.setBounds(0, 0, 404, 469);
		frame.getContentPane().add(panel);
		panel.setLayout(null);
		
		JLabel settingsLabel = new JLabel("초기값 설정");
		settingsLabel.setFont(new Font("맑은 고딕", Font.BOLD, 16));
		settingsLabel.setBounds(29, 28, 98, 15);
		panel.add(settingsLabel);
		
		JLabel settingGuideLabel = new JLabel("※ 초기값을 입력하지 않을 시 표준가이드라인의 수치가 적용됩니다.");
		settingGuideLabel.setFont(new Font("맑은 고딕", Font.PLAIN, 10));
		settingGuideLabel.setBounds(36, 53, 308, 15);
		panel.add(settingGuideLabel);
		
		JLabel targetLabel = new JLabel("적용 대상");
		targetLabel.setFont(new Font("맑은 고딕", Font.BOLD, 16));
		targetLabel.setBounds(29, 299, 98, 15);
		panel.add(targetLabel);
		
		JLabel sessionTimeLabel = new JLabel("세션 타임아웃 시간(초) :");
		sessionTimeLabel.setFont(new Font("맑은 고딕", Font.PLAIN, 12));
		sessionTimeLabel.setBounds(40, 95, 140, 15);
		panel.add(sessionTimeLabel);
		
		sessionTime = new JTextField();
		sessionTime.setBounds(246, 93, 98, 21);
		panel.add(sessionTime);
		sessionTime.setColumns(10);
		
		JLabel pwMinLenthLable = new JLabel("패스워드 최소 길이 :");
		pwMinLenthLable.setFont(new Font("맑은 고딕", Font.PLAIN, 12));
		pwMinLenthLable.setBounds(40, 138, 123, 15);
		panel.add(pwMinLenthLable);
		
		pwMinLenth = new JTextField();
		pwMinLenth.setColumns(10);
		pwMinLenth.setBounds(246, 135, 98, 21);
		panel.add(pwMinLenth);
		
		JLabel pwMaxLenthLable = new JLabel("패스워드 최대 길이 :");
		pwMaxLenthLable.setFont(new Font("맑은 고딕", Font.PLAIN, 12));
		pwMaxLenthLable.setBounds(40, 166, 140, 15);
		panel.add(pwMaxLenthLable);
		
		pwMaxLenth = new JTextField();
		pwMaxLenth.setColumns(10);
		pwMaxLenth.setBounds(246, 163, 98, 21);
		panel.add(pwMaxLenth);
		
		JLabel pwMinDaysLable = new JLabel("패스워드 최소 사용 기간(일) :");
		pwMinDaysLable.setFont(new Font("맑은 고딕", Font.PLAIN, 12));
		pwMinDaysLable.setBounds(40, 212, 162, 15);
		panel.add(pwMinDaysLable);
		
		pwMinDays = new JTextField();
		pwMinDays.setColumns(10);
		pwMinDays.setBounds(246, 209, 98, 21);
		panel.add(pwMinDays);
		
		JLabel pwMaxDaysLable = new JLabel("패스워드 최대 사용 기간(일) :");
		pwMaxDaysLable.setFont(new Font("맑은 고딕", Font.PLAIN, 12));
		pwMaxDaysLable.setBounds(40, 243, 162, 15);
		panel.add(pwMaxDaysLable);
		
		pwMaxDays = new JTextField();
		pwMaxDays.setColumns(10);
		pwMaxDays.setBounds(246, 240, 98, 21);
		panel.add(pwMaxDays);
		
		JCheckBox c6CB = new JCheckBox("  Centos6", true);
		c6CB.setBounds(40, 331, 115, 23);
		panel.add(c6CB);
		
		JCheckBox c7CB = new JCheckBox("  Centos7", true);
		c7CB.setBounds(159, 331, 115, 23);
		panel.add(c7CB);
		
		JCheckBox aixCB = new JCheckBox("  AIX", true);
		aixCB.setBounds(278, 331, 115, 23);
		panel.add(aixCB);
		
		JButton exitButton = new JButton("종료");
		exitButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				JOptionPane.showMessageDialog(null, "프로그램을 종료합니다.");
				System.exit(0);
			}
		});
		exitButton.setBounds(263, 393, 81, 23);
		panel.add(exitButton);
		
		JButton submitButton = new JButton("적용");
		submitButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				// 입력한 초기값 받아오기
				checkDataList.add(0, sessionTime.getText());
				checkDataList.add(1, pwMinLenth.getText());
				checkDataList.add(2, pwMaxLenth.getText());
				checkDataList.add(3, pwMinDays.getText());
				checkDataList.add(4, pwMaxDays.getText());

				// 적용할 OS 정보 받아오기
				btnChkList.add(0, c6CB.isSelected());
				btnChkList.add(1, c7CB.isSelected());
				btnChkList.add(2, aixCB.isSelected());

				DataManager.setIniData(OSList, checkDataList, btnChkList, settingList);
				
				JOptionPane.showMessageDialog(null, "설정값이 적용되었습니다.");				
			}
		});
		submitButton.setBounds(170, 393, 81, 23);
		panel.add(submitButton);
		
		JButton resetButton = new JButton("초기화");
		resetButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// 저장 값 초기화
				fileExist = false;
				DataManager.setGuideLineData(OSList, fileExist);	
				
				JOptionPane.showMessageDialog(null, "모든 설정값이 초기화되었습니다.");

				/** 
				 * 선택한 운영체제만 초기화
				 */
//				// 적용할 OS 정보 받아오기
//				btnChkList.add(0, c6CB.isSelected());
//				btnChkList.add(1, c7CB.isSelected());
//				btnChkList.add(2, aixCB.isSelected());
//				
//				DataManager.resetData(OSList, btnChkList, settingList);
//				
//				JOptionPane.showMessageDialog(null, "선택한 OS의 설정값이 초기화되었습니다.");
			}
		});
		resetButton.setBounds(74, 393, 81, 23);
		panel.add(resetButton);
	}
}
